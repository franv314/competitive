#include <bits/stdc++.h>
using namespace std;

uint32_t masks[] = {
    0b0001001011100010010111000100101,
    0b0001001011100010010111000101101,
    0b0001001011100010110111000100101,
    0b0001001011100010110111000101101,
    0b0001011011100010010111000100101,
    0b0001011011100010010111000101101,
    0b0001011011100010110111000100101,
    0b0001011011100010110111000101101,
    0b0001110100100011101001000111010,
    0b0001110100100011101001000111011,
    0b0001110100100011101101000111010,
    0b0001110100100011101101000111011,
    0b0001110110100011101001000111010,
    0b0001110110100011101001000111011,
    0b0001110110100011101101000111010,
    0b0001110110100011101101000111011,
    0b0010001110100100011101001000111,
    0b0010001110100100011101101000111,
    0b0010001110110100011101001000111,
    0b0010001110110100011101101000111,
    0b0010010111000100101110001001011,
    0b0010010111000100101110001011011,
    0b0010010111000101101110001001011,
    0b0010010111000101101110001011011,
    0b0010110111000100101110001001011,
    0b0010110111000100101110001011011,
    0b0010110111000101101110001001011,
    0b0010110111000101101110001011011,
    0b0010111000100101110001001011100,
    0b0010111000100101110001011011100,
    0b0010111000101101110001001011100,
    0b0010111000101101110001011011100,
    0b0011101001000111010010001110100,
    0b0011101001000111010010001110110,
    0b0011101001000111011010001110100,
    0b0011101001000111011010001110110,
    0b0011101101000111010010001110100,
    0b0011101101000111010010001110110,
    0b0011101101000111011010001110100,
    0b0011101101000111011010001110110,
    0b0100011101001000111010010001110,
    0b0100011101001000111011010001110,
    0b0100011101101000111010010001110,
    0b0100011101101000111011010001110,
    0b0100100011101001000111010010001,
    0b0100100011101001000111011010001,
    0b0100100011101101000111010010001,
    0b0100100011101101000111011010001,
    0b0100101110001001011100010010111,
    0b0100101110001001011100010110111,
    0b0100101110001011011100010010111,
    0b0100101110001011011100010110111,
    0b0101101110001001011100010010111,
    0b0101101110001001011100010110111,
    0b0101101110001011011100010010111,
    0b0101101110001011011100010110111,
    0b0101110001001011100010010111000,
    0b0101110001001011100010110111000,
    0b0101110001011011100010010111000,
    0b0101110001011011100010110111000,
    0b0110100011101001000111010010001,
    0b0110100011101001000111011010001,
    0b0110100011101101000111010010001,
    0b0110100011101101000111011010001,
    0b0110111000100101110001001011100,
    0b0110111000100101110001011011100,
    0b0110111000101101110001001011100,
    0b0110111000101101110001011011100,
    0b0111000100101110001001011100010,
    0b0111000100101110001011011100010,
    0b0111000101101110001001011100010,
    0b0111000101101110001011011100010,
    0b0111010010001110100100011101001,
    0b0111010010001110100100011101101,
    0b0111010010001110110100011101001,
    0b0111010010001110110100011101101,
    0b0111011010001110100100011101001,
    0b0111011010001110100100011101101,
    0b0111011010001110110100011101001,
    0b0111011010001110110100011101101,
    0b1000100101110001001011100010010,
    0b1000100101110001001011100010110,
    0b1000100101110001011011100010010,
    0b1000100101110001011011100010110,
    0b1000101101110001001011100010010,
    0b1000101101110001001011100010110,
    0b1000101101110001011011100010010,
    0b1000101101110001011011100010110,
    0b1000111010010001110100100011101,
    0b1000111010010001110110100011101,
    0b1000111011010001110100100011101,
    0b1000111011010001110110100011101,
    0b1001000111010010001110100100011,
    0b1001000111010010001110110100011,
    0b1001000111011010001110100100011,
    0b1001000111011010001110110100011,
    0b1001011100010010111000100101110,
    0b1001011100010010111000101101110,
    0b1001011100010110111000100101110,
    0b1001011100010110111000101101110,
    0b1010001110100100011101001000111,
    0b1010001110100100011101101000111,
    0b1010001110110100011101001000111,
    0b1010001110110100011101101000111,
    0b1010010001110100100011101001000,
    0b1010010001110100100011101101000,
    0b1010010001110110100011101001000,
    0b1010010001110110100011101101000,
    0b1011010001110100100011101001000,
    0b1011010001110100100011101101000,
    0b1011010001110110100011101001000,
    0b1011010001110110100011101101000,
    0b1011011100010010111000100101110,
    0b1011011100010010111000101101110,
    0b1011011100010110111000100101110,
    0b1011011100010110111000101101110,
    0b1011100010010111000100101110001,
    0b1011100010010111000101101110001,
    0b1011100010110111000100101110001,
    0b1011100010110111000101101110001,
    0b1100010010111000100101110001001,
    0b1100010010111000100101110001011,
    0b1100010010111000101101110001001,
    0b1100010010111000101101110001011,
    0b1100010110111000100101110001001,
    0b1100010110111000100101110001011,
    0b1100010110111000101101110001001,
    0b1100010110111000101101110001011,
    0b1101000111010010001110100100011,
    0b1101000111010010001110110100011,
    0b1101000111011010001110100100011,
    0b1101000111011010001110110100011,
    0b1101001000111010010001110100100,
    0b1101001000111010010001110110100,
    0b1101001000111011010001110100100,
    0b1101001000111011010001110110100,
    0b1101101000111010010001110100100,
    0b1101101000111010010001110110100,
    0b1101101000111011010001110100100,
    0b1101101000111011010001110110100,
    0b1101110001001011100010010111000,
    0b1101110001001011100010110111000,
    0b1101110001011011100010010111000,
    0b1101110001011011100010110111000,
    0b1110001001011100010010111000100,
    0b1110001001011100010010111000101,
    0b1110001001011100010110111000100,
    0b1110001001011100010110111000101,
    0b1110001011011100010010111000100,
    0b1110001011011100010010111000101,
    0b1110001011011100010110111000100,
    0b1110001011011100010110111000101,
    0b1110100100011101001000111010010,
    0b1110100100011101001000111011010,
    0b1110100100011101101000111010010,
    0b1110100100011101101000111011010,
    0b1110110100011101001000111010010,
    0b1110110100011101001000111011010,
    0b1110110100011101101000111010010,
    0b1110110100011101101000111011010,
};

constexpr int mask_no = sizeof(masks) / sizeof(uint32_t);

bool check(int size, uint32_t mask) {
    for (int x = 1; x <= 10; x++) {
        for (int i = 0; i < size - 3 * x; i++) {
            if (
                ((mask >> i) & 1) == ((mask >> (i + x) & 1)) &&
                ((mask >> (i + x)) & 1) == ((mask >> (i + 2 * x) & 1)) &&
                ((mask >> (i + 2 * x)) & 1) == ((mask >> (i + 3 * x) & 1))
            ) {
                return false;
            }
        }
    }

    return true;
}

int main() {
    ifstream in("input.txt");
    ofstream out("output.txt");

    int N, K; in >> N >> K;

    if (N == 1) {
        if (K == 0 || K == 1)
            out << 1 << '\n';
        else
            out << 0 << '\n';
        return 0;
    }

    if (N <= 30) {
        vector<uint32_t> ok_l, ok_r;
        
        for (int mask = 0; mask < (1U << N / 2); mask++)
            if (check(N / 2, mask))
                ok_l.push_back(mask);
        for (int mask = 0; mask < (1U << (N + 1) / 2); mask++)
            if (check((N + 1) / 2, mask))
                ok_r.push_back(mask);

        int cnt = 0;
        for (auto mask_l: ok_l) {
            for (auto mask_r: ok_r) {
                uint32_t mask = (mask_l << (N + 1) / 2) | mask_r;
                cnt += check(N, mask) && __builtin_popcount(mask) == K;
            }
        }
        
        out << cnt << '\n';
        return 0;
    }

    vector<array<int, 2>> transition(mask_no, {-1, -1});
    for (int i = 0; i < mask_no; i++) {
        if (binary_search(masks, masks + mask_no, masks[i] >> 1))
            transition[i][0] = lower_bound(masks, masks + mask_no, masks[i] >> 1) - masks;
        if (binary_search(masks, masks + mask_no, (masks[i] >> 1) | (1 << 30)))
            transition[i][1] = lower_bound(masks, masks + mask_no, (masks[i] >> 1) | (1 << 30)) - masks;
    }

    vector old_dp(N + 1, vector(mask_no, 0U));
    vector new_dp(N + 1, vector(mask_no, 0U));

    for (int i = 0; i < mask_no; i++) {
        old_dp[__builtin_popcount(masks[i])][i] = 1;
    }

    for (int i = 31; i < N; i++) {
        for (int j = i / 31 * 13; j <= (i + 30) / 31 * 18; j++) {
            for (int k = 0; k < mask_no; k++) {
                if (transition[k][0] != -1)
                    new_dp[j][transition[k][0]] += old_dp[j][k];
                if (transition[k][1] != -1)
                    new_dp[j + 1][transition[k][1]] += old_dp[j][k];
            }
        }

        old_dp = new_dp;
        for (int j = 0; j <= i + 1; j++) {
            for (int k = 0; k < mask_no; k++) {
                new_dp[j][k] = 0;
            }
        }
    }

    int ans = 0;
    for (int i = 0; i < mask_no; i++)
        ans += old_dp[K][i];
    
    out << ans << '\n';
}